{"version":3,"file":"component---src-pages-portfolio-mdx-frontmatter-slug-js-content-file-path-portfolio-eebox-index-mdx-6062bbfb9cfbd7ae395c.js","mappings":"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","sources":["webpack://arch-studio/./portfolio/eebox/index.mdx","webpack://arch-studio/./src/pages/portfolio/{mdx.frontmatter__slug}.js","webpack://arch-studio/./src/components/buttons/arrowButton/arrowButton.js","webpack://arch-studio/./src/components/pagesComponents/portfolio/projectView/projectView.js","webpack://arch-studio/./src/components/pagesComponents/portfolio/projectView/projectView.module.css","webpack://arch-studio/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  return React.createElement(React.Fragment);\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"X:/Projekty Webowe/Gotowe projekty react/FrontendMentor/arch-studio/portfolio/eebox/index.mdx\";\nimport {graphql} from 'gatsby';\nimport React from 'react';\nimport Layout from '../../components/layout/layout';\nimport {Seo} from '../../components/seo';\nimport ProjectView from '../../components/pagesComponents/portfolio/projectView/projectView';\nconst PortfolioProject = ({data: {mdx: {frontmatter}}}) => {\n  return React.createElement(Layout, {\n    title: 'Portfolio'\n  }, React.createElement(ProjectView, frontmatter));\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        description\n        date(formatString: \"MMMM D, YYYY\")\n        image_alt\n        image_desktop {\n          childImageSharp {\n            gatsbyImageData(\n              layout: FULL_WIDTH\n              quality: 100\n              placeholder: BLURRED\n            )\n          }\n        }\n        image_tablet {\n          childImageSharp {\n            gatsbyImageData(\n              layout: FULL_WIDTH\n              quality: 100\n              placeholder: BLURRED\n            )\n          }\n        }\n        image_mobile {\n          childImageSharp {\n            gatsbyImageData(\n              layout: FULL_WIDTH\n              quality: 100\n              placeholder: BLURRED\n            )\n          }\n        }\n      }\n    }\n  }\n`;\nexport const Head = ({data: {mdx: {frontmatter: {title, description}}}}) => React.createElement(Seo, {\n  title: 'Portfolio',\n  description: `${title}; ${description}`\n});\nPortfolioProject\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PortfolioProject, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import React from 'react';\r\nimport Button from '../button';\r\n\r\nconst ArrowButton = ({ size = '80px', additionalClasses, ...props }) => {\r\n  return (\r\n    <Button\r\n      hasArrow\r\n      additionalClasses={additionalClasses}\r\n      style={{ padding: 0, width: size, height: size }}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\nexport default ArrowButton;\r\n","import React, { useRef } from 'react';\r\nimport cx from 'classnames';\r\nimport * as styles from './projectView.module.css';\r\nimport { heading__600, body } from '../../../../styles/fonts.module.css';\r\n\r\nimport { GatsbyImage, getImage, withArtDirection } from 'gatsby-plugin-image';\r\nimport ArrowButton from '../../../buttons/arrowButton/arrowButton';\r\nimport { navigate } from 'gatsby';\r\nimport TextArrowButton from '../../../buttons/textArrowButton/textArrowButton';\r\nimport { useGSAP } from '@gsap/react';\r\nimport gsap from 'gsap';\r\nconst ProjectView = ({\r\n  title,\r\n  description,\r\n  image_alt,\r\n  image_desktop,\r\n  image_tablet,\r\n  image_mobile,\r\n}) => {\r\n  const imageSrc = withArtDirection(getImage(image_desktop), [\r\n    {\r\n      media: '(max-width: 767px)',\r\n      image: getImage(image_mobile),\r\n    },\r\n    {\r\n      media: '(max-width: 1303px)',\r\n      image: getImage(image_tablet),\r\n    },\r\n  ]);\r\n\r\n  const textRef = useRef(null);\r\n  const buttonRef = useRef(null);\r\n  const imageRef = useRef(null);\r\n\r\n  useGSAP(() => {\r\n    gsap.fromTo(\r\n      textRef.current,\r\n      {\r\n        opacity: 0,\r\n        yPercent: 100,\r\n        ease: 'power3.inOut',\r\n      },\r\n      {\r\n        opacity: 1,\r\n        yPercent: 0,\r\n        duration: 0.75,\r\n        ease: 'power3.inOut',\r\n      },\r\n    );\r\n    gsap.fromTo(\r\n      buttonRef.current,\r\n      { opacity: 0, yPercent: 100 },\r\n      { opacity: 1, yPercent: 0, delay: 0.75, ease: 'power3.inOut' },\r\n    );\r\n    gsap.fromTo(\r\n      imageRef.current,\r\n      { opacity: 0 },\r\n      { opacity: 1, delay: 0.75, ease: 'power3.inOut' },\r\n    );\r\n  });\r\n  return (\r\n    <section className={styles.projectView}>\r\n      <div className={styles.imageContainer} ref={imageRef}>\r\n        <GatsbyImage\r\n          className={styles.image}\r\n          image={imageSrc}\r\n          alt={image_alt}\r\n        />\r\n        <div className={styles.mask}></div>\r\n      </div>\r\n      <div className={styles.content} ref={textRef}>\r\n        <h1 className={cx(styles.heading, heading__600)}>{title}</h1>\r\n        <p className={cx(styles.description, body)}>{description}</p>\r\n      </div>\r\n      <div ref={buttonRef} className={styles.buttonContainer}>\r\n        <TextArrowButton\r\n          additionalClasses={[styles.returnButton]}\r\n          onClick={() => navigate('/portfolio')}\r\n        >\r\n          See all\r\n        </TextArrowButton>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ProjectView;\r\n","// extracted by mini-css-extract-plugin\nexport var buttonContainer = \"projectView-module--buttonContainer--48d5b\";\nexport var content = \"projectView-module--content--d48ca\";\nexport var description = \"projectView-module--description--37272\";\nexport var heading = \"projectView-module--heading--194bb\";\nexport var image = \"projectView-module--image--a1985\";\nexport var imageContainer = \"projectView-module--imageContainer--45467\";\nexport var mask = \"projectView-module--mask--4da9c\";\nexport var projectView = \"projectView-module--projectView--c692f\";\nexport var returnButton = \"projectView-module--returnButton--43401\";","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","React","wrapper","MDXLayout","Object","assign","_provideComponents","components","PortfolioProject","_ref","data","mdx","frontmatter","Layout","title","ProjectView","Head","_ref2","description","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","size","additionalClasses","hasArrow","style","padding","width","height","image_alt","image_desktop","image_tablet","image_mobile","imageSrc","withArtDirection","getImage","media","image","textRef","useRef","buttonRef","imageRef","useGSAP","gsap","fromTo","current","opacity","yPercent","ease","duration","delay","className","ref","G","alt","cx","heading__600","body","onClick","navigate","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}